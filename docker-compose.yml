version: "3.9"

services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile-nginx
    profiles: ["prod", "all"]
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - scala_prod
      - certbot
    command: bash -c 'nginx -g "daemon off;"'
    volumes:
      - ./support/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/serve_content:/etc/nginx/html
      - ./support/logs:/etc/nginx/logs
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    links:
      - scala_prod

  certbot:
    image: certbot/certbot:latest
    profiles: ["prod", "all"]
    volumes:

  app_dev:
    build:
      context: .
      dockerfile: Dockerfile-app
    profiles: ["dev", "all"]
    ports:
      - "8082:8082"
    command: npm run devDocker
    working_dir: /frontend

  scala_prod:
    build:
      context: .
      dockerfile: Dockerfile-scala
    profiles: ["prod", "all"]
    depends_on:
      - postgres2
    ports:
      - "8081:8080"
    command: bash -c "export SETTINGS=prod; sbt 'runMain com.chrisgoldammer.cocktails.DataSetupProdInitialize'; sbt 'assembly'; java -cp target/scala-3.2.1/cocktails-assembly-0.0.2.jar com.chrisgoldammer.cocktails.Main"
    expose: "8080"

  scala_dev:
    build:
      context: .
      dockerfile: Dockerfile-scala
    profiles: ["dev", "all"]
    depends_on:
      - postgres2
    ports:
      - "8080:8080"
    command: bash -c "export SETTINGS=devDocker; sbt 'runMain com.chrisgoldammer.cocktails.DataSetupDevMain'; sbt 'runMain com.chrisgoldammer.cocktails.Main'"

  postgres2:
    build: 
      context: .
      dockerfile: Dockerfile-postgres
    profiles: ["dev"]
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_DB: ingredients_dev
    ports:
      - "5433:5432"

